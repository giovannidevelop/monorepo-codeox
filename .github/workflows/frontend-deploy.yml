name: Frontend Deployment

on:
  push:
    paths:
      - 'packages/frontend/subox-fe-main/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies and build
        run: |
          cd packages/frontend/subox-fe-main
          npm install
          CI=false npm run build

      - name: Deploy to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-2'
          SOURCE_DIR: 'packages/frontend/subox-fe-main/build'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # OPCIONAL: Haz público tu bucket S3 (usa solo si tu bucket es público)
      - name: Set S3 public read policy (opcional)
        run: |
          aws s3api put-bucket-policy \
            --bucket ${{ secrets.AWS_S3_BUCKET }} \
            --policy '{
              "Version": "2012-10-17",
              "Statement": [{
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ secrets.AWS_S3_BUCKET }}/*"
              }]
            }'

      # Configura Default Root Object (index.html)
      - name: Set CloudFront Default Root Object to index.html
        run: |
          DIST_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          aws cloudfront get-distribution-config --id $DIST_ID > cf-config.json
          ETag=$(jq -r .ETag cf-config.json)
          jq .DistributionConfig cf-config.json > dist-config.json
          jq '.DefaultRootObject="index.html"' dist-config.json > new-dist-config.json
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --distribution-config file://new-dist-config.json \
            --if-match $ETag

      # Redirección de errores 403/404 a index.html (SPA support)
      - name: Set CloudFront Custom Error Responses for SPA
        run: |
          DIST_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          aws cloudfront get-distribution-config --id $DIST_ID > cf-config.json
          ETag=$(jq -r .ETag cf-config.json)
          jq .DistributionConfig cf-config.json > dist-config.json
          jq '.CustomErrorResponses = {
            "Quantity": 2,
            "Items": [
              {
                "ErrorCode": 404,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 0
              },
              {
                "ErrorCode": 403,
                "ResponsePagePath": "/index.html",
                "ResponseCode": "200",
                "ErrorCachingMinTTL": 0
              }
            ]
          }' dist-config.json > new-dist-config.json
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --distribution-config file://new-dist-config.json \
            --if-match $ETag

      # Invalida el cache de CloudFront
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
