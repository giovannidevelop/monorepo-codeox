**GuÃ­a Completa para Integrar un Pipeline de CI/CD desde GitHub a AWS (Monorepo)**

---

### ðŸš© Paso 1: ConfiguraciÃ³n Inicial

* **Repositorio en GitHub:**

  * AsegÃºrate que tu monorepo estÃ© correctamente estructurado:

    * Backend (`cliente-service`)
    * Frontend (`subox-fe-main`)

---

### ðŸš© Paso 2: Crear Pipeline con GitHub Actions

**Crear workflow para Backend (cliente-service):**

Crea un archivo `.github/workflows/backend-deploy.yml`:

```yaml
name: Backend Deployment

on:
  push:
    paths:
      - 'packages/backend/cliente-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build
        run: |
          cd packages/backend/cliente-service
          mvn clean install
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ClienteService
          environment_name: ClienteService-env
          version_label: ${{ github.sha }}
          region: us-east-2
          deployment_package: packages/backend/cliente-service/target/*.jar
```

**Crear workflow para Frontend (subox-fe-main):**

Crea `.github/workflows/frontend-deploy.yml`:

```yaml
name: Frontend Deployment

on:
  push:
    paths:
      - 'packages/frontend/subox-fe-main/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Build
        run: |
          cd packages/frontend/subox-fe-main
          npm install
          npm run build
      - name: Deploy to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-2'
          SOURCE_DIR: 'packages/frontend/subox-fe-main/build'
```

---

### ðŸš© Paso 3: ConfiguraciÃ³n en AWS

* **Backend:**

  * Configura **Elastic Beanstalk**:

    * Crea una aplicaciÃ³n y entorno Java.
    * Configura la integraciÃ³n con tu base de datos MySQL.

* **Frontend:**

  * Configura **S3 Bucket:**

    * Configura permisos para servir archivos estÃ¡ticos.
  * Configura **CloudFront**:

    * DistribuciÃ³n CDN apuntando al bucket de S3.

---

### ðŸš© Paso 4: Variables de Entorno y Seguridad

* Guarda las claves (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`) como secretos en GitHub.
* Ajusta la configuraciÃ³n del backend y frontend para manejar variables sensibles correctamente.

---

### ðŸš© Roadmap del Pipeline CI/CD

| Paso | DescripciÃ³n           | Servicio                              |
| ---- | --------------------- | ------------------------------------- |
| 1    | Configurar monorepo   | GitHub                                |
| 2    | Crear workflows CI/CD | GitHub Actions                        |
| 3    | ConfiguraciÃ³n en AWS  | AWS Elastic Beanstalk, S3, CloudFront |
| 4    | Variables y Seguridad | GitHub Secrets, AWS IAM               |

ðŸ“Œ **IlustraciÃ³n sugerida:** Flujo de pipeline mostrando GitHub â†’ GitHub Actions â†’ AWS (Backend y Frontend).

---

Â¡Ahora tienes un pipeline automatizado desde GitHub a AWS con despliegue continuo para tu aplicaciÃ³n!
